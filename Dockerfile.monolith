# Monolithic Railway deployment
FROM node:18-alpine

# Install system dependencies
RUN apk add --no-cache \
    texlive-full \
    python3 \
    py3-pip \
    curl \
    bash

# Set working directory
WORKDIR /app

# Copy all project files
COPY . .

# Install dependencies for all services
RUN cd dashboard && npm ci --only=production
RUN cd orchestrator && npm ci --only=production
RUN cd texlive && npm ci --only=production

# Build applications
RUN cd dashboard && npm run build
RUN cd orchestrator && npm run build

# Create data directory
RUN mkdir -p data/runs

# Set permissions
RUN chmod +x scripts/build-resume.sh

# Create startup script
RUN cat > start.sh << 'EOF'
#!/bin/bash
set -e

# Start TeXLive service in background
cd /app/texlive && npm start &
TEXLIVE_PID=$!

# Wait for TeXLive to start
sleep 5

# Start Orchestrator service in background
cd /app/orchestrator && npm start &
ORCHESTRATOR_PID=$!

# Wait for Orchestrator to start
sleep 5

# Start Dashboard (main service)
cd /app/dashboard && npm start

# Cleanup function
cleanup() {
    echo "Shutting down services..."
    kill $TEXLIVE_PID $ORCHESTRATOR_PID 2>/dev/null || true
    exit 0
}

# Set up signal handlers
trap cleanup SIGTERM SIGINT

# Wait for any process to exit
wait
EOF

RUN chmod +x start.sh

# Expose port (Railway uses PORT environment variable)
EXPOSE 3000

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV TEXLIVE_URL=http://localhost:5001/build
ENV NEXT_PUBLIC_ORCHESTRATOR_URL=http://localhost:4000

# Start all services
CMD ["./start.sh"]
